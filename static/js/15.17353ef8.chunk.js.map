{"version":3,"file":"static/js/15.17353ef8.chunk.js","mappings":"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","sources":["components/ContactItem/ContactItem.styled.jsx","components/ContactItem/ContactItem.jsx","components/ContactList/ContactList.styled.jsx","redux/selectors.js","components/ContactList/ContactList.jsx","components/ContactForm/ContactForm.styled.jsx","components/ContactForm/ContactForm.jsx","components/Section/Section.styled.jsx","components/Section/Section.jsx","components/Filter/Filter.styled.jsx","components/Filter/Filter.jsx","components/Notification/Notification.styled.jsx","components/Notification/Notification.jsx","pages/Contacts.jsx"],"sourcesContent":["import styled from '@emotion/styled';\n\nexport const Button = styled.button`\n  display: inline;\n  margin-left: 10px;\n  font-size: 15px;\n  padding: 5px 15px;\n  border-radius: 5px;\n  border: none;\n  transition: all 250ms ease-out;\n\n  :hover,\n  :focus {\n    outline: 1px solid #2a2a2a;\n    cursor: pointer;\n    background-color: #bbceeb;\n  }\n`;\n","import PropTypes from 'prop-types';\nimport { Button } from './ContactItem.styled';\nimport { useDispatch } from 'react-redux';\nimport { deleteContact } from 'redux/operations';\n\nexport const ContactItem = ({ contact: { id, name, number } }) => {\n  const dispatch = useDispatch();\n\n  const handleDelete = () => dispatch(deleteContact(id));\n\n  return (\n    <>\n      <span>\n        {name} {number}\n      </span>\n      <Button type=\"button\" onClick={handleDelete}>\n        Delete\n      </Button>\n    </>\n  );\n};\n\nContactItem.propTypes = {\n  contact: PropTypes.shape({\n    id: PropTypes.string.isRequired,\n    name: PropTypes.string.isRequired,\n    number: PropTypes.string.isRequired,\n  }),\n};\n","import styled from '@emotion/styled';\n\nexport const List = styled.ul`\n  list-style-type: none;\n  padding: 0;\n`;\n\nexport const ListItem = styled.li`\n  padding: 10px;\n`;\n","export const getContacts = state => state.contacts.items;\n\nexport const getFilter = state => state.filter;\n\nexport const getIsLoading = state => state.contacts.isLoading;\n\nexport const getError = state => state.contacts.error;\n","import { ContactItem } from 'components/ContactItem/ContactItem';\nimport { List, ListItem } from './ContactList.styled';\nimport { useSelector } from 'react-redux';\nimport { getContacts, getFilter } from 'redux/selectors';\n\nconst filterContacts = (items, filter) =>\n  items.filter(item => item.name.toLowerCase().includes(filter.toLowerCase()));\n\nexport const ContactList = () => {\n  const contacts = useSelector(getContacts);\n  const filter = useSelector(getFilter);\n\n  const visibleContacts = filterContacts(contacts, filter);\n  return (\n    <List>\n      {visibleContacts.map(item => (\n        <ListItem key={item.id}>\n          <ContactItem contact={item} />\n        </ListItem>\n      ))}\n    </List>\n  );\n};\n","/* eslint-disable no-unused-vars */\nimport styled from '@emotion/styled';\nimport { Form, Field, ErrorMessage } from 'formik';\n\nexport const Forma = styled(Form)`\n  padding: 20px 0;\n  display: flex;\n  flex-direction: column;\n  gap: 20px;\n  margin-bottom: 30px;\n`;\n\nexport const Input = styled(Field)`\n  display: block;\n  padding: 5px;\n  font-size: 20px;\n  font-family: Arial, Helvetica, sans-serif;\n  color: #2a2a2a;\n`;\n\nexport const Label = styled.label`\n  font-size: 20px;\n  font-family: Arial, Helvetica, sans-serif;\n  color: #2a2a2a;\n`;\n\nexport const Error = styled.div`\n  font-size: 15px;\n  padding: 5px;\n  color: red;\n`;\n\nexport const Btn = styled.button`\n  width: 150px;\n  font-size: 20px;\n  padding: 5px;\n  border-radius: 5px;\n  border: none;\n  transition: all 250ms ease-out;\n\n  :hover,\n  :focus {\n    outline: 1px solid #2a2a2a;\n    cursor: pointer;\n    background-color: #bbceeb;\n  }\n`;\n","import { Formik, ErrorMessage } from 'formik';\nimport * as yup from 'yup';\nimport 'yup-phone';\nimport { Forma, Input, Label, Error, Btn } from './ContactForm.styled';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { addContact } from 'redux/operations';\nimport { getContacts } from 'redux/selectors';\n\nconst schema = yup.object().shape({\n  name: yup.string().min(3, 'Too short!').required(),\n  number: yup.string().phone().required(),\n});\n\nconst initialValues = {\n  name: '',\n  number: '',\n};\n\nexport const ContactForm = () => {\n  const dispatch = useDispatch();\n  const contacts = useSelector(getContacts);\n\n  const handleSubmit = (values, { resetForm }) => {\n    const { name, number } = values;\n    if (\n      contacts.find(\n        contact => contact.name.toLowerCase() === name.toLowerCase()\n      )\n    ) {\n      alert(`${name} is already in contacts`);\n      return;\n    }\n    const contactItem = {\n      name,\n      number,\n    };\n    dispatch(addContact(contactItem));\n    resetForm();\n  };\n\n  return (\n    <Formik\n      initialValues={initialValues}\n      validationSchema={schema}\n      onSubmit={handleSubmit}\n    >\n      <Forma autoComplete=\"off\">\n        <Label htmlFor=\"name\">\n          Name\n          <Input type=\"text\" name=\"name\" />\n          <ErrorMessage name=\"name\" render={msg => <Error>{msg}</Error>} />\n        </Label>\n        <Label htmlFor=\"number\">\n          Phone Number\n          <Input type=\"tel\" name=\"number\" />\n          <ErrorMessage name=\"number\" render={msg => <Error>{msg}</Error>} />\n        </Label>\n        <Btn type=\"submit\">Add contact</Btn>\n      </Forma>\n    </Formik>\n  );\n};\n","import styled from '@emotion/styled';\n\nexport const Title = styled.h2`\n  font-size: 40px;\n  margin: 0;\n  padding: 0;\n  font-family: Helvetica, sans-serif;\n`;\n","import PropTypes from 'prop-types';\nimport { Title } from './Section.styled';\n\nexport const Section = ({ title, children }) => {\n  return (\n    <>\n      <Title>{title}</Title>\n      {children}\n    </>\n  );\n};\n\nSection.propTypes = {\n  title: PropTypes.string.isRequired,\n  children: PropTypes.node,\n};\n","import styled from '@emotion/styled';\n\nexport const SearchTitle = styled.p`\n  font-size: 20px;\n  font-family: Arial, Helvetica, sans-serif;\n  margin: 10px 0;\n  padding: 0;\n`;\n\nexport const Search = styled.input`\n  display: block;\n  padding: 5px;\n  font-size: 15px;\n  font-family: Arial, Helvetica, sans-serif;\n  color: #2a2a2a;\n`;\n","import { SearchTitle, Search } from './Filter.styled';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { setFilter } from 'redux/filterSlice';\nimport { getFilter } from 'redux/selectors';\n\nexport const Filter = () => {\n  const dispatch = useDispatch();\n  const value = useSelector(getFilter);\n\n  const handleChange = e => {\n    dispatch(setFilter(e.target.value));\n  };\n\n  return (\n    <>\n      <SearchTitle>Find contacts by name</SearchTitle>\n      <Search type=\"text\" onChange={handleChange} value={value} />\n    </>\n  );\n};\n","import styled from '@emotion/styled';\n\nexport const Info = styled.p`\n  font-size: 25px;\n  font-family: Arial, Helvetica, sans-serif;\n  font-weight: 500;\n  margin: 0;\n  padding: 0;\n  margin-top: 20px;\n`;\n","import PropTypes from 'prop-types';\nimport { Info } from './Notification.styled';\n\nexport const Notification = ({ message }) => {\n  return <Info>{message}</Info>;\n};\n\nNotification.propTypes = {\n  message: PropTypes.string.isRequired,\n};\n","import { useEffect } from 'react';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { Helmet } from 'react-helmet';\nimport { ContactList } from 'components/ContactList/ContactList';\nimport { ContactForm } from 'components/ContactForm/ContactForm';\nimport { Section } from 'components/Section/Section';\nimport { Filter } from 'components/Filter/Filter';\nimport { Notification } from 'components/Notification/Notification';\nimport { fetchContacts } from 'redux/operations';\nimport { getIsLoading, getContacts, getError } from 'redux/selectors';\n\nexport default function Tasks() {\n  const dispatch = useDispatch();\n  const isLoading = useSelector(getIsLoading);\n  const contacts = useSelector(getContacts);\n  const error = useSelector(getError);\n\n  useEffect(() => {\n    dispatch(fetchContacts());\n  }, [dispatch]);\n\n  return (\n    <>\n      <Helmet>\n        <title>Your tasks</title>\n      </Helmet>\n      <Section title=\"Phonebook\">\n        <ContactForm />\n      </Section>\n      {error && !isLoading ? (\n        error\n      ) : (\n        <div>\n          {isLoading && !error ? (\n            <b>Request in progress...</b>\n          ) : (\n            <Section title=\"Contacts\">\n              {contacts.length > 0 ? (\n                <>\n                  <Filter />\n                  <ContactList />\n                </>\n              ) : (\n                <Notification message=\"Ooops, there is no contact in your phonebook\" />\n              )}\n            </Section>\n          )}\n        </div>\n      )}\n      {/* <ContactForm />\n      <div>{isLoading && 'Request in progress...'}</div>\n      <ContactList /> */}\n    </>\n  );\n}\n"],"names":["Button","styled","ContactItem","contact","id","name","number","dispatch","useDispatch","type","onClick","deleteContact","List","ListItem","getContacts","state","contacts","items","getFilter","filter","getIsLoading","isLoading","getError","error","ContactList","visibleContacts","item","toLowerCase","includes","filterContacts","useSelector","map","Forma","Form","Input","Field","Label","Error","Btn","schema","yup","shape","min","required","phone","initialValues","ContactForm","validationSchema","onSubmit","values","resetForm","find","alert","contactItem","addContact","autoComplete","htmlFor","render","msg","Title","Section","title","children","SearchTitle","Search","Filter","value","onChange","e","setFilter","target","Info","Notification","message","Tasks","useEffect","fetchContacts","Helmet","length"],"sourceRoot":""}