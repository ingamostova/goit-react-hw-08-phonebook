{"version":3,"file":"static/js/933.5b715cae.chunk.js","mappings":"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","sources":["components/ContactItem/ContactItem.jsx","redux/selectors.js","components/ContactList/ContactList.jsx","components/ContactForm/ContactForm.styled.jsx","components/ContactForm/ContactForm.jsx","components/Filter/Filter.jsx","components/Notification/Notification.jsx","components/Skeleton.jsx","pages/Contacts.jsx"],"sourcesContent":["import PropTypes from 'prop-types';\nimport { useDispatch } from 'react-redux';\nimport { deleteContact } from 'redux/operations';\nimport PersonIcon from '@mui/icons-material/Person';\nimport PhoneIcon from '@mui/icons-material/Phone';\nimport {\n  Card,\n  CardActions,\n  CardContent,\n  Typography,\n  Button,\n} from '@mui/material';\n\nexport const ContactItem = ({ contact: { id, name, number } }) => {\n  const dispatch = useDispatch();\n\n  const handleDelete = () => dispatch(deleteContact(id));\n\n  return (\n    <Card>\n      <CardContent\n        container\n        direction=\"column\"\n        justifyContent=\"center\"\n        alignItems=\"flex-start\"\n      >\n        <Typography variant=\"h6\" sx={{ display: 'flex', alignItems: 'center' }}>\n          <PersonIcon color=\"primary\" /> {name}\n        </Typography>\n        <Typography sx={{ display: 'flex', alignItems: 'center' }}>\n          <PhoneIcon color=\"primary\" /> {number}\n        </Typography>\n      </CardContent>\n      <CardActions>\n        <Button type=\"button\" onClick={handleDelete}>\n          Delete\n        </Button>\n      </CardActions>\n    </Card>\n  );\n};\n\nContactItem.propTypes = {\n  contact: PropTypes.shape({\n    id: PropTypes.string.isRequired,\n    name: PropTypes.string.isRequired,\n    number: PropTypes.string.isRequired,\n  }),\n};\n","export const getContacts = state => state.contacts.items;\n\nexport const getFilter = state => state.filter;\n\nexport const getIsLoading = state => state.contacts.isLoading;\n\nexport const getError = state => state.contacts.error;\n","import { ContactItem } from 'components/ContactItem/ContactItem';\nimport { useSelector } from 'react-redux';\nimport { getContacts, getFilter } from 'redux/selectors';\nimport { Grid } from '@mui/material';\n\nconst filterContacts = (items, filter) =>\n  items.filter(item => item.name.toLowerCase().includes(filter.toLowerCase()));\n\nexport const ContactList = () => {\n  const contacts = useSelector(getContacts);\n  const filter = useSelector(getFilter);\n\n  const visibleContacts = filterContacts(contacts, filter);\n  return (\n    <Grid container spacing={2} direction=\"row\" sx={{ mt: '0.5rem' }}>\n      {visibleContacts.map(item => (\n        <Grid item xs={12} sm={6} md={4} lg={3} key={item.id}>\n          <ContactItem contact={item} />\n        </Grid>\n      ))}\n    </Grid>\n  );\n};\n","import styled from '@emotion/styled';\nimport { Form, Field } from 'formik';\n\nexport const Forma = styled(Form)`\n  display: flex;\n  flex-direction: column;\n  gap: 20px;\n  margin-bottom: 20px;\n`;\n\nexport const Input = styled(Field)`\n  display: block;\n  padding: 5px;\n  font-size: 16px;\n  font-family: Arial, Helvetica, sans-serif;\n  color: #2a2a2a;\n`;\n\nexport const Label = styled.label`\n  font-size: 16px;\n  font-family: Arial, Helvetica, sans-serif;\n  color: #2a2a2a;\n`;\n\nexport const Error = styled.div`\n  font-size: 15px;\n  padding: 5px;\n  color: red;\n`;\n\nexport const Btn = styled.button`\n  width: 150px;\n  font-size: 20px;\n  padding: 5px;\n  border-radius: 5px;\n  border: none;\n  transition: all 250ms ease-out;\n\n  :hover,\n  :focus {\n    outline: 1px solid #2a2a2a;\n    cursor: pointer;\n    color: #fff;\n    background-color: #1976d2;\n    outline: none;\n  }\n`;\n","import { Formik, ErrorMessage } from 'formik';\nimport * as yup from 'yup';\nimport 'yup-phone';\nimport { Forma, Error } from './ContactForm.styled';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { addContact } from 'redux/operations';\nimport { getContacts } from 'redux/selectors';\nimport { Label, Input, Btn } from './ContactForm.styled';\n\nconst schema = yup.object().shape({\n  name: yup.string().min(3, 'Too short!').required(),\n  number: yup.string().phone().required(),\n});\n\nconst initialValues = {\n  name: '',\n  number: '',\n};\n\nexport const ContactForm = () => {\n  const dispatch = useDispatch();\n  const contacts = useSelector(getContacts);\n\n  const handleSubmit = (values, { resetForm }) => {\n    const { name, number } = values;\n    if (\n      contacts.find(\n        contact => contact.name.toLowerCase() === name.toLowerCase()\n      )\n    ) {\n      alert(`${name} is already in contacts`);\n      return;\n    }\n    const contactItem = {\n      name,\n      number,\n    };\n    dispatch(addContact(contactItem));\n    resetForm();\n  };\n\n  return (\n    <Formik\n      initialValues={initialValues}\n      validationSchema={schema}\n      onSubmit={handleSubmit}\n    >\n      <Forma autoComplete=\"off\">\n        <Label htmlFor=\"name\">\n          Name\n          <Input type=\"text\" name=\"name\" />\n          <ErrorMessage name=\"name\" render={msg => <Error>{msg}</Error>} />\n        </Label>\n        <Label htmlFor=\"number\">\n          Phone Number\n          <Input type=\"tel\" name=\"number\" />\n          <ErrorMessage name=\"number\" render={msg => <Error>{msg}</Error>} />\n        </Label>\n        <Btn type=\"submit\">Add contact</Btn>\n      </Forma>\n    </Formik>\n  );\n};\n","import { useDispatch, useSelector } from 'react-redux';\nimport { setFilter } from 'redux/filterSlice';\nimport { getFilter } from 'redux/selectors';\nimport { Container, TextField } from '@mui/material';\n\nexport const Filter = () => {\n  const dispatch = useDispatch();\n  const value = useSelector(getFilter);\n\n  const handleChange = e => {\n    dispatch(setFilter(e.target.value));\n  };\n\n  return (\n    <Container maxWidth=\"xs\" sx={{ ml: '0' }}>\n      <TextField\n        variant=\"standard\"\n        label=\"Search by name\"\n        fullWidth\n        type=\"text\"\n        onChange={handleChange}\n        value={value}\n      />\n    </Container>\n  );\n};\n","import { Alert, AlertTitle } from '@mui/material';\nimport PropTypes from 'prop-types';\n\nexport const Notification = ({ message }) => {\n  return (\n    <Alert severity=\"info\">\n      <AlertTitle>Info</AlertTitle>\n      {message}\n    </Alert>\n  );\n};\n\nNotification.propTypes = {\n  message: PropTypes.string.isRequired,\n};\n","import { Skeleton, Stack } from '@mui/material';\n\nexport const Loading = () => {\n  return (\n    <Stack\n      justifyContent=\"space-evenly\"\n      gap={3}\n      flexWrap=\"wrap\"\n      direction=\"row\"\n    >\n      <Skeleton variant=\"rounded\" width={300} height={140} />\n      <Skeleton variant=\"rounded\" width={300} height={140} />\n      <Skeleton variant=\"rounded\" width={300} height={140} />\n      <Skeleton variant=\"rounded\" width={300} height={140} />\n      <Skeleton variant=\"rounded\" width={300} height={140} />\n      <Skeleton variant=\"rounded\" width={300} height={140} />\n    </Stack>\n  );\n};\n","import { useEffect } from 'react';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { Helmet } from 'react-helmet';\nimport { ContactList } from 'components/ContactList/ContactList';\nimport { ContactForm } from 'components/ContactForm/ContactForm';\nimport { Filter } from 'components/Filter/Filter';\nimport { Notification } from 'components/Notification/Notification';\nimport { fetchContacts } from 'redux/operations';\nimport { getIsLoading, getContacts, getError } from 'redux/selectors';\nimport { Loading } from 'components/Skeleton';\nimport { Alert, Container } from '@mui/material';\n\nexport default function Tasks() {\n  const dispatch = useDispatch();\n  const isLoading = useSelector(getIsLoading);\n  const contacts = useSelector(getContacts);\n  const error = useSelector(getError);\n\n  useEffect(() => {\n    dispatch(fetchContacts());\n  }, [dispatch]);\n\n  return (\n    <Container>\n      <Helmet>\n        <title>Your tasks</title>\n      </Helmet>\n      <ContactForm />\n      {error && !isLoading ? (\n        <Alert severity=\"error\">{error}</Alert>\n      ) : (\n        <div>\n          {isLoading && !error ? (\n            <Loading />\n          ) : (\n            <>\n              {contacts.length > 0 ? (\n                <>\n                  <Filter />\n                  <ContactList />\n                </>\n              ) : (\n                <Notification message=\"Ooops, there is no contact in your phonebook\" />\n              )}\n            </>\n          )}\n        </div>\n      )}\n    </Container>\n  );\n}\n"],"names":["ContactItem","contact","id","name","number","dispatch","useDispatch","Card","CardContent","container","direction","justifyContent","alignItems","Typography","variant","sx","display","Person","color","Phone","CardActions","Button","type","onClick","deleteContact","getContacts","state","contacts","items","getFilter","filter","getIsLoading","isLoading","getError","error","ContactList","visibleContacts","item","toLowerCase","includes","filterContacts","useSelector","Grid","spacing","mt","map","xs","sm","md","lg","Forma","styled","Form","Input","Field","Label","Error","Btn","schema","yup","shape","min","required","phone","initialValues","ContactForm","validationSchema","onSubmit","values","resetForm","find","alert","contactItem","addContact","autoComplete","htmlFor","render","msg","Filter","value","Container","maxWidth","ml","TextField","label","fullWidth","onChange","e","setFilter","target","Notification","message","Alert","severity","AlertTitle","Loading","Stack","gap","flexWrap","Skeleton","width","height","Tasks","useEffect","fetchContacts","Helmet","length"],"sourceRoot":""}